{"ast":null,"code":"var _jsxFileName = \"/Users/jonathanh/fullstack/part1/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Button = props => /*#__PURE__*/_jsxDEV(\"button\", {\n  onClick: props.handleClick,\n  children: props.text\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 4,\n  columnNumber: 3\n}, this);\n\n_c = Button;\n\nconst Statistics = props => {\n  if (isNaN(props.val)) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [props.text, \" 0\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [props.text, \" \", props.val]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this);\n};\n\n_c2 = Statistics;\n\nconst App = () => {\n  _s();\n\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n  const totalFeedback = good + neutral + bad;\n  const averageFeedback = (good - bad) / totalFeedback;\n  const pctPositiveFeedback = good / totalFeedback * 100;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"give feedback\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      handleClick: () => setGood(good + 1),\n      text: \"good\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      handleClick: () => setNeutral(neutral + 1),\n      text: \"neutral\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      handleClick: () => setBad(bad + 1),\n      text: \"bad\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"statistics\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Statistics, {\n      text: \"good\",\n      val: good\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Statistics, {\n      text: \"neutral\",\n      val: neutral\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Statistics, {\n      text: \"bad\",\n      val: bad\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Statistics, {\n      text: \"all\",\n      val: totalFeedback\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Statistics, {\n      text: \"average\",\n      val: averageFeedback\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Statistics, {\n      text: \"positive\",\n      val: pctPositiveFeedback + '%'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"eScCFcZxMV7EVTyq8/QmtvFilbs=\");\n\n_c3 = App;\nexport default App;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Button\");\n$RefreshReg$(_c2, \"Statistics\");\n$RefreshReg$(_c3, \"App\");","map":{"version":3,"sources":["/Users/jonathanh/fullstack/part1/src/App.js"],"names":["React","useState","Button","props","handleClick","text","Statistics","isNaN","val","App","good","setGood","neutral","setNeutral","bad","setBad","totalFeedback","averageFeedback","pctPositiveFeedback"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;AAEA,MAAMC,MAAM,GAAIC,KAAD,iBACb;AAAQ,EAAA,OAAO,EAAEA,KAAK,CAACC,WAAvB;AAAA,YACGD,KAAK,CAACE;AADT;AAAA;AAAA;AAAA;AAAA,QADF;;KAAMH,M;;AAMN,MAAMI,UAAU,GAAIH,KAAD,IAAW;AAC5B,MAAII,KAAK,CAACJ,KAAK,CAACK,GAAP,CAAT,EAAsB;AACpB,wBACE;AAAA,iBACGL,KAAK,CAACE,IADT;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAKD;;AACD,sBACE;AAAA,eACGF,KAAK,CAACE,IADT,OACgBF,KAAK,CAACK,GADtB;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAbD;;MAAMF,U;;AAeN,MAAMG,GAAG,GAAG,MAAM;AAAA;;AAChB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBV,QAAQ,CAAC,CAAD,CAAhC;AACA,QAAM,CAACW,OAAD,EAAUC,UAAV,IAAwBZ,QAAQ,CAAC,CAAD,CAAtC;AACA,QAAM,CAACa,GAAD,EAAMC,MAAN,IAAgBd,QAAQ,CAAC,CAAD,CAA9B;AAEA,QAAMe,aAAa,GAAGN,IAAI,GAAGE,OAAP,GAAiBE,GAAvC;AACA,QAAMG,eAAe,GAAG,CAACP,IAAI,GAAGI,GAAR,IAAeE,aAAvC;AACA,QAAME,mBAAmB,GAAIR,IAAI,GAAGM,aAAR,GAAyB,GAArD;AAEA,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAIE,QAAC,MAAD;AAAQ,MAAA,WAAW,EAAE,MAAML,OAAO,CAACD,IAAI,GAAG,CAAR,CAAlC;AAA8C,MAAA,IAAI,EAAC;AAAnD;AAAA;AAAA;AAAA;AAAA,YAJF,eAKE,QAAC,MAAD;AAAQ,MAAA,WAAW,EAAE,MAAMG,UAAU,CAACD,OAAO,GAAG,CAAX,CAArC;AAAoD,MAAA,IAAI,EAAC;AAAzD;AAAA;AAAA;AAAA;AAAA,YALF,eAME,QAAC,MAAD;AAAQ,MAAA,WAAW,EAAE,MAAMG,MAAM,CAACD,GAAG,GAAG,CAAP,CAAjC;AAA4C,MAAA,IAAI,EAAC;AAAjD;AAAA;AAAA;AAAA;AAAA,YANF,eAQE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YARF,eAWE,QAAC,UAAD;AAAY,MAAA,IAAI,EAAC,MAAjB;AAAwB,MAAA,GAAG,EAAEJ;AAA7B;AAAA;AAAA;AAAA;AAAA,YAXF,eAYE,QAAC,UAAD;AAAY,MAAA,IAAI,EAAC,SAAjB;AAA2B,MAAA,GAAG,EAAEE;AAAhC;AAAA;AAAA;AAAA;AAAA,YAZF,eAaE,QAAC,UAAD;AAAY,MAAA,IAAI,EAAC,KAAjB;AAAuB,MAAA,GAAG,EAAEE;AAA5B;AAAA;AAAA;AAAA;AAAA,YAbF,eAcE,QAAC,UAAD;AAAY,MAAA,IAAI,EAAC,KAAjB;AAAuB,MAAA,GAAG,EAAEE;AAA5B;AAAA;AAAA;AAAA;AAAA,YAdF,eAeE,QAAC,UAAD;AAAY,MAAA,IAAI,EAAC,SAAjB;AAA2B,MAAA,GAAG,EAAEC;AAAhC;AAAA;AAAA;AAAA;AAAA,YAfF,eAgBE,QAAC,UAAD;AAAY,MAAA,IAAI,EAAC,UAAjB;AAA4B,MAAA,GAAG,EAAEC,mBAAmB,GAAG;AAAvD;AAAA;AAAA;AAAA;AAAA,YAhBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAoBD,CA7BD;;GAAMT,G;;MAAAA,G;AA+BN,eAAeA,GAAf","sourcesContent":["import React, { useState } from 'react'\n\nconst Button = (props) => (\n  <button onClick={props.handleClick}>\n    {props.text}\n  </button>\n)\n\nconst Statistics = (props) => {\n  if (isNaN(props.val)) {\n    return (\n      <div>\n        {props.text} 0\n      </div>\n    )\n  }\n  return (\n    <div>\n      {props.text} {props.val}\n    </div>\n  )\n}\n\nconst App = () => {\n  const [good, setGood] = useState(0)\n  const [neutral, setNeutral] = useState(0)\n  const [bad, setBad] = useState(0)\n\n  const totalFeedback = good + neutral + bad\n  const averageFeedback = (good - bad) / totalFeedback\n  const pctPositiveFeedback = (good / totalFeedback) * 100\n\n  return (\n    <div>\n      <h2>\n        give feedback\n      </h2>\n      <Button handleClick={() => setGood(good + 1)} text='good' />\n      <Button handleClick={() => setNeutral(neutral + 1)} text='neutral' />\n      <Button handleClick={() => setBad(bad + 1)} text='bad' />\n\n      <h2>\n        statistics\n      </h2>\n      <Statistics text='good' val={good} />\n      <Statistics text='neutral' val={neutral} />\n      <Statistics text='bad' val={bad} />\n      <Statistics text='all' val={totalFeedback} /> \n      <Statistics text='average' val={averageFeedback} />\n      <Statistics text='positive' val={pctPositiveFeedback + '%'} />\n    </div>\n  )\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}