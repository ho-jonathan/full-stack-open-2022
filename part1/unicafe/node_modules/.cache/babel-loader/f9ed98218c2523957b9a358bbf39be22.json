{"ast":null,"code":"var _jsxFileName = \"/Users/jonathanh/fullstack/part1/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Button = props => /*#__PURE__*/_jsxDEV(\"button\", {\n  onClick: props.handleClick,\n  children: props.text\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 4,\n  columnNumber: 3\n}, this);\n\n_c = Button;\n\nconst Statistics = props => {\n  if (props.totalFeedback === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"No feedback given\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"table\", {\n    children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: [/*#__PURE__*/_jsxDEV(StatisticLine, {\n        text: \"good\",\n        value: props.good\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StatisticLine, {\n        text: \"neutral\",\n        value: props.neutral\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StatisticLine, {\n        text: \"bad\",\n        value: props.bad\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StatisticLine, {\n        text: \"all\",\n        value: props.totalFeedback\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StatisticLine, {\n        text: \"average\",\n        value: props.averageFeedback\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StatisticLine, {\n        text: \"positive\",\n        value: props.pctPositiveFeedback\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this);\n};\n\n_c2 = Statistics;\n\nconst StatisticLine = props => {\n  if (isNaN(props.value)) {\n    props.value = 0;\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"tr\", {\n    children: /*#__PURE__*/_jsxDEV(\"td\", {\n      children: [props.text, \" \", props.value]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n\n_c3 = StatisticLine;\n\nconst App = () => {\n  _s();\n\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n  const totalFeedback = good + neutral + bad;\n  const averageFeedback = (good - bad) / totalFeedback;\n  const pctPositiveFeedback = good / totalFeedback * 100;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"give feedback\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      handleClick: () => setGood(good + 1),\n      text: \"good\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      handleClick: () => setNeutral(neutral + 1),\n      text: \"neutral\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      handleClick: () => setBad(bad + 1),\n      text: \"bad\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"statistics\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Statistics, {\n      good: good,\n      neutral: neutral,\n      bad: bad,\n      totalFeedback: totalFeedback,\n      averageFeedback: averageFeedback,\n      pctPositiveFeedback: pctPositiveFeedback\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"eScCFcZxMV7EVTyq8/QmtvFilbs=\");\n\n_c4 = App;\nexport default App;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"Button\");\n$RefreshReg$(_c2, \"Statistics\");\n$RefreshReg$(_c3, \"StatisticLine\");\n$RefreshReg$(_c4, \"App\");","map":{"version":3,"sources":["/Users/jonathanh/fullstack/part1/src/App.js"],"names":["React","useState","Button","props","handleClick","text","Statistics","totalFeedback","good","neutral","bad","averageFeedback","pctPositiveFeedback","StatisticLine","isNaN","value","App","setGood","setNeutral","setBad"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\n\nconst Button = (props) => (\n  <button onClick={props.handleClick}>\n    {props.text}\n  </button>\n)\n\nconst Statistics = (props) => {\n  if (props.totalFeedback === 0) {\n    return (\n      <div>\n        No feedback given\n      </div>\n    )\n  }\n  return (\n    <table>\n      <tbody>\n        <StatisticLine text='good' value={props.good} />\n        <StatisticLine text='neutral' value={props.neutral} />\n        <StatisticLine text='bad' value={props.bad} />\n        <StatisticLine text='all' value={props.totalFeedback} />\n        <StatisticLine text='average' value={props.averageFeedback} />\n        <StatisticLine text='positive' value={props.pctPositiveFeedback} />\n      </tbody>\n    </table>\n  )\n}\n\nconst StatisticLine = (props) => {\n  if (isNaN(props.value)) {\n    props.value = 0\n  }\n  return (\n    <tr>\n      <td>{props.text} {props.value}</td>\n    </tr>\n  )\n}\n\nconst App = () => {\n  const [good, setGood] = useState(0)\n  const [neutral, setNeutral] = useState(0)\n  const [bad, setBad] = useState(0)\n\n  const totalFeedback = good + neutral + bad\n  const averageFeedback = (good - bad) / totalFeedback\n  const pctPositiveFeedback = (good / totalFeedback) * 100\n\n  return (\n    <div>\n      <h2>\n        give feedback\n      </h2>\n      <Button handleClick={() => setGood(good + 1)} text='good' />\n      <Button handleClick={() => setNeutral(neutral + 1)} text='neutral' />\n      <Button handleClick={() => setBad(bad + 1)} text='bad' />\n\n      <h2>\n        statistics\n      </h2>\n      <Statistics good={good} neutral={neutral} bad={bad} totalFeedback={totalFeedback} averageFeedback={averageFeedback} pctPositiveFeedback={pctPositiveFeedback} />\n    </div>\n  )\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}